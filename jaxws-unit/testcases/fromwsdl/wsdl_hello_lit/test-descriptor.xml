<descriptor since="2.0">
    <description>Randon fromwsdl tests</description>
    <service basedir="./server">
        <wsdl href="hello_literal.wsdl"/>
    </service>
    <client name="fromwsdl.doclit1">
        <description>
            Test hello().
        </description>
        arg = "foo";
        extra = "bar";
        req = new Hello_Type();
        req.setArgument(arg);
        req.setExtra(extra);
        response = helloPort.hello(req);
        assertEquals(arg, response.getArgument());
        assertEquals(extra, response.getExtra());
    </client>
    <client name="fromwsdl.doclit2">
        <description>
            Test Keywords.
        </description>
        String resp = helloPort.testKeyword("Hello");
        assertEquals(resp, "Hello World!");
    </client>

    <client name="fromwsdl.doclit3">
        <description>
            Test method with void.
        </description>
        req = new VoidType();
        response = helloPort.voidTest(req);
        assertNotNull(response);
    </client>

    <client name="fromwsdl.doclit4">
        <description>
            Test echoArray()
        </description>
        in = new String[]{"JAXRPC 1.0", "JAXRPC 1.1", "JAXRPC 1.1.2", "JAXRPC 2.0"};

        nt = new NameType();
        nt.getName().add(in[0]);
        nt.getName().add(in[1]);
        nt.getName().add(in[2]);
        nt.getName().add(in[3]);
        req = new javax.xml.ws.Holder(nt);
        helloPort.echoArray(req);
        assertNull(req.value);
    </client>

    <client name="fromwsdl.doclit5">
        <description>
            Test echoArray1()
        </description>
        in = new String[]{"JAXRPC 1.0", "JAXRPC 1.1", "JAXRPC 1.1.2", "JAXRPC 2.0", "EA"};

        nt = new NameType();
        nt.getName().add(in[0]);
        nt.getName().add(in[1]);
        nt.getName().add(in[2]);
        nt.getName().add(in[3]);
        req = new javax.xml.ws.Holder(nt);
        helloPort.echoArray1(req);
        assertTrue(Arrays.equals(in, req.value.getName().toArray()));
    </client>

    <client name="fromwsdl.doclit6">
        <description>
            Test echoArray2().
        </description>
        req = new javax.xml.ws.Holder();
        helloPort.echoArray2(req);
        assertNull(req.value);
    </client>

    <client name="fromwsdl.doclit7">
        <description>
            Test echoArray3()
        </description>
        in = new ArrayList();
        in.add("JAXRPC 1.0");
        in.add("JAXRPC 1.1");
        in.add("JAXRPC 1.1.2");
        in.add("JAXRPC 2.0");
        req = new javax.xml.ws.Holder(in);
        helloPort.echoArray3(req);
        assertEquals(in, req.value);
    </client>

    <client name="fromwsdl.doclit8">
        <description>
            Test echoArray4().
        </description>
        resp = helloPort.echoArray4(new NameType1());
        assertEquals(resp.getName().get(0).getArgument(), "arg1");
        assertEquals(resp.getName().get(0).getExtra(), "extra1");
        assertEquals(resp.getName().get(1).getArgument(), "arg2");
        assertEquals(resp.getName().get(1).getExtra(), "extra2");
    </client>

    <client name="fromwsdl.doclit9">
        <description>
            Test MU
        </description>
        String next_1_1 = "http://schemas.xmlsoap.org/soap/actor/next";

        ((BindingProvider) helloPort).getBinding().setHandlerChain(new ArrayList());
        MUHelperHandler handler = new MUHelperHandler();

        handlers = ((BindingProvider) helloPort).getBinding().getHandlerChain();
        handlers.add(handler);
        ((BindingProvider) helloPort).getBinding().setHandlerChain(handlers);

        // have handler set header that is ignored
        handler.setMUHeader(new QName("urn:mutest", "someheader"),
            "notarealactor");

        // make the call
        arg = "foo";
        req = new Hello_Type();
        req.setArgument(arg);
        response = helloPort.hello(req);
        assertEquals(arg, response.getArgument());

        // add header that should result in soap fault
        handler.setMUHeader(new QName("urn:mutest", "someheader"), next_1_1);

        // make the call
        try {
            response = helloPort.hello(req);
            fail("did not receive any exception");
        } catch (ProtocolException e) {
            if (e instanceof SOAPFaultException) {
                // pass
            } else {
                fail("did not receive soap fault, received: " +
                    e.toString());
            }
        } catch (Exception e) {
            fail("did not receive protocol exception. received " +
                e.toString());
        }
    </client>

    <client name="fromwsdl.echoAnyType">
        <description>
            Test echoAnyType
        </description>
        <![CDATA[
        import javax.xml.parsers.DocumentBuilderFactory;
        import javax.xml.parsers.ParserConfigurationException;
        import org.w3c.dom.Document;
        import org.w3c.dom.Element;
        import java.io.ByteArrayInputStream;

        String s = "<foo><my:bar xmlns:my=\"urn:.my.example.com\">Hello World</my:bar></foo>";
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        Document d = dbf.newDocumentBuilder().parse(new ByteArrayInputStream(s.getBytes()));
        Element in = d.getDocumentElement();
        Element out = (Element) helloPort.echoAnyType(in);
        assertTrue(out != null)
        ]]>
    </client>

</descriptor>