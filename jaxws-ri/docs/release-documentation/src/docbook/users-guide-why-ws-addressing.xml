<?xml version="1.0" encoding="UTF-8"?>
<!--

DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common Development
and Distribution License("CDDL") (collectively, the "License").  You
may not use this file except in compliance with the License.  You can
obtain a copy of the License at
http://glassfish.java.net/public/CDDL+GPL_1_1.html
or packager/legal/LICENSE.txt.  See the License for the specific
language governing permissions and limitations under the License.

When distributing the software, include this License Header Notice in each
file and include the License file at packager/legal/LICENSE.txt.

GPL Classpath Exception:
Oracle designates this particular file as subject to the "Classpath"
exception as provided by Oracle in the GPL Version 2 section of the License
file that accompanied this code.

Modifications:
If applicable, add the following below the License Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyright [year] [name of copyright owner]"

Contributor(s):
If you wish your version of this file to be governed by only the CDDL or
only the GPL Version 2, indicate your decision by adding "[Contributor]
elects to include this software in this distribution under the [CDDL or GPL
Version 2] license."  If you don't indicate a single choice of license, a
recipient has the option to distribute your version of this file under
either the CDDL, the GPL Version 2 or to extend the choice of license to
its licensees as provided above.  However, if you add GPL Version 2 code
and therefore, elected the GPL Version 2 license, then the option applies
only if the new code is made subject to such option by the copyright
holder.

        -->
<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-why-ws-addressing" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Why WS-Addressing?</title>

    <section xml:id="what-is-ws-addressing">
        <title>What is WS-Addressing?</title>

        <para><link xlink:href="http://www.w3.org/2002/ws/addr/">Web Services
        Addressing</link> provides transport-neutral mechanisms to address Web
        services and messages. The transport-neutrality is achieved by
        normalizing the information typically shared between transport
        protocols and messaging systems.Â To serve this purpose, WS-Addressing
        defines two new constructs, <emphasis role="bold">Message Addressing
        Properties</emphasis> (MAPs) and <emphasis role="bold">Endpoint
        Reference</emphasis> (EPR), that normalize the information independent
        of any particular transport or messaging system. MAPs convey
        end-to-end message characteristics including addressing for source and
        destination endpoints as well as message identity that allows uniform
        addressing of messages independent of the underlying transport. EPR
        convey the information needed to address a Web service
        endpoint.</para>

        <para>The subsequent sections explain the different use cases served
        by WS-Addressing.</para>

        <section xml:id="transport-neutrality">
            <title>Transport Neutrality</title>

            <para>This section describes how a message can be sent to a Web
            service endpoint in transport neutral manner.</para>

            <example>
                <title>SOAP 1.2 message, without WS-Addressing, sent over
                HTTP</title>

                <programlistingco>
                    <areaspec>
                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex1-1">
                            <area coords="1"></area>
                        </areaset>

                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex1-2">
                            <area coords="5"></area>
                        </areaset>
                    </areaspec>

                    <programlisting language="xml"><![CDATA[POST /fabrikam/Purchasing HTTP 1.1/POST
Host: example.com
SOAPAction: http://example.com/fabrikam/SubmitPO

<S:Envelope
        xmlns:S="http://www.w3.org/2003/05/soap-envelope"
        xmlns:wombat="http://wombat.org/">
    <S:Header>
        <wombat:MessageID>
            uuid:e197db59-0982-4c9c-9702-4234d204f7f4
        </wombat:MessageID>
    </S:Header>
    <S:Body>
        ...
    </S:Body>
</S:Envelope>]]></programlisting>

                    <calloutlist>
                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex1-1">
                            <para>HTTP transport headers.</para>
                        </callout>

                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex1-2">
                            <para>SOAP message in HTTP body.</para>
                        </callout>
                    </calloutlist>
                </programlistingco>

                <para>The host (<literal>example.com</literal>), the dispatch
                method (<literal>POST</literal>) and the URL to dispatch to
                (<literal>/fabrikam/Purchasing</literal>) are in the HTTP
                transport headers. The actual message and implied meaning (for
                example payload's <literal>QName</literal> or
                <literal>SOAPAction</literal>) is defined by the messaging
                system (<literal>SOAP</literal>) or transport protocol
                (<literal>HTTP</literal>). If the message is to be sent over
                an alternate transport, such as SMTP, then the information
                conveyed in HTTP transport headers need to be mapped to SMTP
                specific headers. On the server side, to dispatch
                successfully, a Web service stack has to gather the
                information from the SMTP (as opposed to HTTP) headers and the
                SOAP message.</para>
            </example>

            <para>Also in the above message, there is no standard header to
            establish the identity of a message. In this case,
            <literal>MessageID</literal> header defined in the namespace URI
            bound to <literal>wombat</literal> prefix is used but is
            application specific and is thus not re-usable.</para>

            <para>WS-Addressing introduce Message Addressing Properties that
            collectively augment a message to normalize this
            information.</para>

            <example>
                <title>SOAP 1.2 message, with WS-Addressing, sent over
                HTTP</title>

                <programlistingco>
                    <areaspec>
                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex2-1">
                            <area coords="1"></area>
                        </areaset>

                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex2-2">
                            <area coords="5"></area>
                        </areaset>

                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex2-3">
                            <area coords="9"></area>
                        </areaset>
                    </areaspec>

                    <programlisting language="xml"><![CDATA[POST /fabrikam/Purchasing HTTP 1.1/POST
Host: example.com
SOAPAction: http://example.com/fabrikam/SubmitPO

<S:Envelope
        xmlns:S="http://www.w3.org/2003/05/soap-envelope"
        ]]><emphasis role="bold">xmlns:wsa="http://www.w3.org/2005/08/addressing/"</emphasis><![CDATA[>
    <S:Header>
        ]]><emphasis role="bold">&lt;wsa:MessageID&gt;
            uuid:e197db59-0982-4c9c-9702-4234d204f7f4
        &lt;/wsa:MessageID&gt;
        &lt;wsa:To&gt;
            http://example.com/fabrikam/Purchasing
        &lt;/wsa:To&gt;
        &lt;wsa:Action&gt;
            http://example.com/fabrikam/SubmitPO
        &lt;/wsa:Action&gt;</emphasis><![CDATA[
    </S:Header>
    <S:Body>
        ...
    </S:Body>
</S:Envelope>]]></programlisting>

                    <calloutlist>
                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-1">
                            <para>HTTP transport headers.</para>
                        </callout>

                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-2">
                            <para>SOAP message in HTTP body.</para>
                        </callout>

                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-3">
                            <para>Binding of Message Addressing Properties to
                            SOAP 1.2 message.</para>
                        </callout>
                    </calloutlist>
                </programlistingco>

                <para>For example, <literal>wsa:MessageID</literal> is a
                binding of an abstract property that defines an absolute URI
                that uniquely identifies the message,
                <literal>wsa:To</literal> is binding of an abstract absolute
                URI representing the address of the intended receiver of this
                message and <literal>wsa:Action</literal> is binding of an
                abstract absolute IRI that uniquely identifies the semantics
                implied by this message. All the information earlier shared
                between transport protocols and messaging systems is now
                normalized into a uniform format that can be processed
                independent of transport or application.</para>

                <para>If the exactly same message is to be sent/received using
                a different transport, for example asynchronously over SMTP,
                then the value of <literal>wsa:To</literal> header could be
                changed to <literal>mailto:purchasing@example.com</literal>.
                The updated <literal>wsa:To</literal> header looks
                like:</para>

                <programlisting language="xml"><![CDATA[<wsa:To>
    ]]><emphasis role="bold">mailto:purchasing@example.com</emphasis><![CDATA[
</wsa:To>]]></programlisting>

                <para>On the server side, Web services stack can gather all
                the information from the SOAP message and then dispatch it
                correctly.</para>
            </example>
        </section>

        <section xml:id="stateful-web-service">
            <title>Stateful Web service</title>

            <para>Web services are usually stateless, i.e. the service
            endpoint receives a request and responds back without saving any
            processing state in between different requests. However making Web
            services stateful enables to share multiple instances of service
            endpoints. For example, consider a stateful Bank Web service. The
            client (say bank customer) can obtain a bank EPR, with relevant
            state information stored as reference parameters, and invoke a
            method on that EPR to do a series of banking operations. On the
            service endpoint, whenever a request is received, the reference
            parameters from the EPR are available as first-class SOAP headers
            allowing the endpoint to restore the state.</para>

            <para>&jax-ws.product.name; enables <link
            xlink:href="http://jax-ws.java.net/nonav/jax-ws-21-ea2/docs/users-guide-stateful-webservice">stateful
            Web services</link>Â to be annotated with
            <literal>com.sun.xml.ws.developer.Stateful</literal>
            annotation.</para>
        </section>

        <section xml:id="simple-and-complex-meps">
            <title>Simple and Complex MEPs</title>

            <para>WS-Addressing defines standard <link
            xlink:href="http://www.w3.org/TR/2006/REC-ws-addr-core-20060509/#abstractmaps">Message
            Addressing Properties</link> (MAPs) to support simple and complex
            message patterns. The SOAP Binding defines a mapping of these MAPs
            to SOAP headers and convey end-to-end message characteristics
            including addressing for source and destination endpoints as well
            as message identity. For example <literal>destination</literal>
            MAP represents an absolute IRI representing the address of the
            intended receiver of the message and is mapped to a SOAP header
            with <literal>wsa:To</literal> element name. <literal>reply
            endpoint</literal> represents an endpoint reference for the
            intended receiver for replies to this message and is mapped to a
            SOAP header with <literal>wsa:ReplyTo</literal> element name.Â  In
            addition, WSDL Binding, also defines requirement on the presence
            of these MAPs for standard Message Exchange Patterns (MEPs) such
            as <link
            xlink:href="http://www.w3.org/TR/wsdl#_request-response">request/response</link>
            and <link
            xlink:href="http://www.w3.org/TR/wsdl#_one-way">one-way</link>.</para>

            <para>Using these MAPs, complex MEPs can be created. For
            example:</para>

            <orderedlist>
                <listitem>
                    <para><emphasis role="bold">Asynchronous MEP</emphasis>:
                    Using <literal>reply endpoint</literal> MAP, an
                    asynchronous transport may be specified for a synchronous
                    request. For example, a client application might send a
                    request over HTTP and ask to receive the response through
                    SMTP.</para>
                </listitem>

                <listitem>
                    <para><emphasis role="bold">Conversation MEP</emphasis>:
                    Using <literal>relationship</literal> MAP, that defines
                    the relationship between two messages, a conversational
                    MEP can be defined by correlating multiple
                    request/response MEPs. For example a client sending a
                    request to service endpoint receives a response with
                    <literal>wsa:RelatesTo</literal> MAP. The service endpoint
                    may optionally include <literal>wsa:MessageID</literal> in
                    the response. This MAP can then be included by the client
                    in <literal>wsa:RelatesTo</literal> MAP in next request to
                    the service endpoint there by starting a
                    conversation.</para>
                </listitem>

                <listitem>
                    <para><emphasis role="bold">Distributed MEP</emphasis>:
                    Using <literal>reply endpoint</literal> and <literal>fault
                    endpoint</literal> MAP, a different transport/address can
                    be specified for receiving normal and fault responses
                    respectively.</para>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="composability-with-other-ws-specifications">
            <title>Composability with other WS-* specifications</title>

            <para>There are several Web services specification (commonly known
            as <link xlink:href="http://en.wikipedia.org/wiki/WS-*">WS-*
            specs</link>) that make use of the abstract properties defined by
            WS-Addressing. For example <link
            xlink:href="http://en.wikipedia.org/wiki/WS-MetadataExchange">WS-Metadata
            Exchange</link> define a bootstrap mechanism for retrieving
            metadata before the business message exchange can take place. This
            mechanism involve sending a <link
            xlink:href="http://www.w3.org/Submission/WS-Transfer/">WS-Transfer</link>
            request for the retrieval of a resource's representation. A
            typical request message looks like:</para>

            <programlistingco>
                <areaspec>
                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex3-1">
                        <area coords="1"></area>
                    </areaset>

                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex3-2">
                        <area coords="3"></area>
                    </areaset>

                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex3-3">
                        <area coords="5"></area>
                    </areaset>
                </areaspec>

                <programlisting language="xml"><![CDATA[<s11:Envelope
        xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
        ]]><emphasis role="bold">xmlns:wsa="http://www.w3.org/2005/08/addressing"</emphasis><![CDATA[>
    <s11:Header>
        <wsa:Action>
            ]]><emphasis role="bold">http://schemas.xmlsoap.org/ws/2004/09/transfer/Get</emphasis><![CDATA[
        </wsa:Action>
        <wsa:To>http://example.org/metadata</wsa10:To>
        <wsa:ReplyTo>
            <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous
            </wsa10:Address>
        </wsa:ReplyTo>
        <wsa:MessageID>
            uuid: 68da6b24-7fa1-4da2-8a06-e615bfa3d2d0
        </wsa:MessageID>
    </s11:Header>
    <s11:Body/>
</s11:Envelope>]]></programlisting>

                <calloutlist>
                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex3-1">
                        <para>SOAP request message to retrieve metadata about
                        a Web service endpoint.</para>
                    </callout>

                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex3-2">
                        <para>WS-Addressing namespace URI bound to
                        "<literal>wsa</literal>" prefix.</para>
                    </callout>

                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-3">
                        <para>The standard WS-Addressing MAPs used to convey
                        the semantics (<literal>wsa:Action</literal>),
                        receiver (<literal>wsa:To</literal>) of the message,
                        intended receiver of reply
                        (<literal>wsa:ReplyTo</literal>) message and identity
                        (<literal>wsa:MessageID</literal>) information of the
                        message</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            <para>This message has an empty SOAP Body and relies completely
            upon standard MAPs to convey all the information. Similarly, a
            WS-Metadata Exchange response message with metadata looks
            like:</para>

            <programlistingco>
                <areaspec>
                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex4-1">
                        <area coords="5"></area>
                    </areaset>

                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex4-2">
                        <area coords="12"></area>
                    </areaset>
                </areaspec>

                <programlisting language="xml"><![CDATA[<s11:Envelope
        xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
        ]]><emphasis role="bold">xmlns:wsa="http://www.w3.org/2005/08/addressing"</emphasis><![CDATA[>
    <s11:Header>
        <wsa:Action>
            ]]><emphasis role="bold">http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse</emphasis><![CDATA[
        </wsa:Action>
        <wsa:RelatesTo>
            uuid: 68da6b24-7fa1-4da2-8a06-e615bfa3d2d0
        </wsa:RelatesTo>
    </s11:Header>
    <s11:Body/>
    ...
    <s11:Body/>
</s11:Envelope>]]></programlisting>

                <calloutlist>
                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex4-1">
                        <para>The standard WS-Addressing MAPs used to convey
                        the semantics (<literal>wsa:Action</literal>) of the
                        response message and relationship
                        (<literal>wsa:RelatesTo</literal>) to the request
                        message.</para>
                    </callout>

                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex4-2">
                        <para>Abbreviated SOAP Body for simplicity which
                        otherwise would contain the MEX response.</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            <para><link
            xlink:href="http://en.wikipedia.org/wiki/WS-ReliableMessaging">WS-Reliable
            Messaging</link> describes a protocol that allows messages to be
            delivered reliably between distributed applications in the
            presence of software component, system or network failures. This
            specification defines protocol messages that must be exchanged
            between client and service endpoint, before the business message
            exchange, in order to deliver the messages reliably. For example,
            RM Source sends <literal>&lt;CreateSequence&gt;</literal> request
            message to RM Destination to create an outbound sequence. The
            message looks like:</para>

            <programlistingco>
                <areaspec>
                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex5-1">
                        <area coords="5"></area>
                    </areaset>
                </areaspec>

                <programlisting language="xml"><![CDATA[<s11:Envelope
        xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
        ]]><emphasis role="bold">xmlns:wsa=" http://www.w3.org/2005/08/addressing"</emphasis><![CDATA[
        xmlns:wsrm=" http://schemas.xmlsoap.org/ws/2005/02/rm">
    <s11:Body>
        <wsrm:CreateSequence>
            ]]><emphasis role="bold">&lt;wsrm:AcksTo&gt;</emphasis><![CDATA[
                <wsa:Address>
                    http://www.w3.org/2005/08/addressing/anonymous
                </wsa:Address>
            ]]><emphasis role="bold">&lt;/wsrm:AcksTo&gt;</emphasis><![CDATA[
        </wsrm:CreateSequence>
    </s11:Body>
</s11:Envelope>]]></programlisting>

                <calloutlist>
                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex4-1">
                        <para>SOAP Body of the request message.</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            <para>The Body contains an element, <literal>wsrm:AcksTo</literal>
            (of the type Endpoint Reference), that specifies the endpoint
            reference to which
            <literal>&lt;SequenceAcknowledgement&gt;</literal> messages and
            faults related to sequence creation are sent.</para>

            <para>WS-Secure Conversation, WS-Trust, WS-Policy and other
            similar specifications use the constructs defined by WS-Addressing
            as building blocks.</para>
        </section>
    </section>

    <section xml:id="ws-addressing-versions">
        <title>WS-Addressing Versions</title>

        <para>There are two prominent versions of WS-Addressing that are
        commonly used:Â </para>

        <itemizedlist>
            <listitem>
                <para><link xlink:href="http://www.w3.org/2002/ws/addr/">W3C
                WS-Addressing</link></para>
            </listitem>

            <listitem>
                <para><link
                xlink:href="http://www.w3.org/Submission/ws-addressing/">Member
                Submission WS-Addressing</link></para>
            </listitem>
        </itemizedlist>

        <para>Sun, IBM, BEA, Microsoft and SAP co-authored and submitted a
        WS-Addressing specification to W3C in August 2004. W3C chartered a new
        Working Group with a mission to produce a <link
        xlink:href="http://www.w3.org/2005/10/Process-20051014/tr.html#RecsW3C">W3C
        Recommendation</link> for WS-Addressing by refining the submitted
        specification. The original specification submitted to W3C is referred
        as "Member Submission WS-Addressing" or "Submission WS-Addressing".
        The term <link
        xlink:href="http://www.w3.org/2005/10/Process-20051014/submission.html#Submission">Member
        Submission</link> is defined by W3C.</para>

        <para>The WG was <link
        xlink:href="http://www.w3.org/2006/10/ws-addr-charter.html#deliverables">chartered</link>
        to deliver a W3C Recommendation for WS-Addressing <link
        xlink:href="http://www.w3.org/TR/ws-addr-core">Core</link>, <link
        xlink:href="http://www.w3.org/TR/ws-addr-soap">SOAP Binding</link>
        (mapping abstract properties defined in Core to SOAP 1.1 and 1.2) and
        <link xlink:href="http://www.w3.org/TR/ws-addr-wsdl">WSDL
        Binding</link> (mechanisms to define property values in WSDL 1.1 and
        WSDL 2.0 service descriptions) specification. This separate between
        Core/Bindings is common methodology where Core is relevant to
        application developers and Binding (both SOAP and WSDL) is relevant
        for Web service stack implementers. This collective set of
        specifications is referred as "W3C WS-Addressing".</para>

        <para>&jax-ws.product.name.short; supports both versions
        out-of-the-box. Check <link
        xlink:href="http://jax-ws.java.net/nonav/jax-ws-21-ea2/docs/users-guide-overview">Users
        Guide</link> on how to enable either of the versions on a service
        endpoint <link
        xlink:href="http://jax-ws.java.net/nonav/jax-ws-21-ea2/docs/users-guide-ws-addressing#Addressing_annotations">starting
        from Java</link> or <link
        xlink:href="http://jax-ws.java.net/nonav/jax-ws-21-ea2/docs/users-guide-ws-addressing#Starting_from_WSDL">starting
        from WSDL</link>.</para>
    </section>
</section>
