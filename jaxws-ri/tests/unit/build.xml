<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<project name="jaxws-unit" basedir="." default="run">

    <property environment="env"/>
    <property name="tomcat.home" value="${env.TOMCAT_HOME}"/>
    <property name="as.home" value="${env.AS_HOME}"/>
    <property name="name" value="jaxws-unit"/>
    <property name="build.home" value="${basedir}/target"/>
    <property name="lib.home" value="${basedir}/lib"/>
    <property name="docs.home" value="${basedir}/docs"/>
    <property name="logs.dir" value="${build.home}/surefire-reports"/>
    <property name="test" value="testcases"/>
    <property name="jaxws-hudson-project" value="jaxws-ri-22x-maven"/>
    <property name="hudson-relative-artifact-location" value="jaxws-ri"/> 
    <!-- Additional arguments to test harness -->
    <property name="args" value=""/>
    <property name="jvmOpts" value=""/>
    <condition property="log.prop" value="true" else="false">
        <istrue value="${log}"/>
    </condition>
    <condition property="libraries.dir.prop" value="-Dlibraries.dir=${libraries.dir}" else="">
        <available file="${libraries.dir}"/>
    </condition>
    <condition property="jvm.opts.prop" value="${jvmOpts}" else="">
        <length string="${jvmOpts}" trim="true" when="greater" length="3" />
    </condition>

    <!-- default build id -->
    <tstamp>
        <format property="now" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
    </tstamp>
    <property name="build.id" value="${now}(${user.name})"/>

    <property name="proxy.host" value="www-proxy.us.oracle.com"/>
    <target name="probe-proxy">
        <condition property="proxy.not.needed">
          <and>
            <isset property="proxy.host"/>
            <!-- <isreachable host="${proxy.host}"/> -->
            <isreachable url="http://www.oracle.com" timeout="10"/> 
          </and>
        </condition>
      </target>

      <target name="set-proxy" depends="probe-proxy" unless="proxy.not.needed">
        <echo message="Setting proxy"/>
        <property name="proxy.port" value="80"/>
        <property name="proxy.user" value=""/>
        <property name="proxy.pass" value=""/>
        <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
        <property name="http.proxyHost" value="${proxy.host}"/>
        <property name="http.proxyPort" value="${proxy.port}"/>  
      </target>


    <target name="init">
        <echo message="-------- ${name} ${build.id} --------"/>
    </target>

    <target name="prepare" depends="init,set-proxy">
        <mkdir dir="target"/>
    </target>


    <target name="integrate-ws-test-harness" depends="prepare"
            description="integrate the last successful ws-test-harness Hudson build">
        <get src="http://hudson-sca.us.oracle.com/job/jaxws-test-harness/lastSuccessfulBuild/artifact/test-harness/build/test-harness.zip"
             dest="${build.home}/test-harness.zip"/>
        <unzip src="${build.home}/test-harness.zip" dest="${build.home}"/>
        <copy todir="lib" overwrite="true">
            <fileset dir="${build.home}/test-harness" includes="*.zip,*.jar"/>
        </copy>
        <copy todir="${docs.home}" overwrite="true">
            <fileset dir="${build.home}/test-harness" includes="*.html, *.png"/>
        </copy>
    </target>

    <target name="get-jaxws-image" unless="jaxwsdir">
        <get src="http://sysifos-sol.cz.oracle.com/hudson/job/${jaxws-hudson-project}/lastSuccessfulBuild/artifact/jaxws-ri/bundles/jaxws-ri/target/jaxws-ri.zip"
             dest="${build.home}/jaxws-ri.zip"/>
        <unzip src="${build.home}/jaxws-ri.zip" dest="${build.home}"/>
        <!-- for JDK6 endorsed dir -->
        <mkdir dir="${build.home}/jaxws-ri/lib1"/>
        <copydir src="${build.home}/jaxws-ri/lib" dest="${build.home}/jaxws-ri/lib1" includes="jaxb-api.jar,jaxws-api.jar,saaj-api.jar"/>

        <get src="http://sysifos-sol.cz.oracle.com/hudson/job/${jaxws-hudson-project}/lastSuccessfulBuild/artifact/jaxws-ri/transports/local/target/jaxws-local-transport-2.2.8-SNAPSHOT.jar"
             dest="${build.home}/jaxws-local-transport.jar"/>
    </target>

    <!-- Run tests on jaxws wspace -->
    <target name="run-jaxws-wspace-local" if="jaxwsdir">
        <run-tests>
            <arguments>
                <arg value="-cp:jaxws"/>
                <arg path="${jaxwsdir}"/>
            </arguments>
        </run-tests>
    </target>

    <!-- Run tests on jaxws image -->
    <target name="run-jaxws-image-local" unless="jaxwsdir">
        <property name="path-to-jaxws-image" location="${build.home}/jaxws-ri"/>
        <run-tests>
            <arguments>
                <arg value="-cp:jaxws-image"/>
                <arg path="${path-to-jaxws-image}"/>
                <arg value="-transport"/>
                <arg path="${build.home}/jaxws-local-transport.jar"/>
            </arguments>
        </run-tests>
    </target>


    <target name="run-jaxws-image-with-tomcat-embedded" unless="jaxwsdir">
        <property name="path-to-jaxws-image" location="build.home/jaxws-ri"/>
        <run-tests>
            <arguments>
                <arg value="-cp:jaxws-image"/>
                <arg path="${path-to-jaxws-image}"/>
                <arg value="-tomcat-embedded"/>
                <arg value="${tomcat.home}"/>
            </arguments>
        </run-tests>
    </target>

    <target name="run-jaxws-wspace-with-tomcat-embedded" if="jaxwsdir">
        <run-tests>
            <arguments>
                <arg value="-cp:jaxws"/>
                <arg path="${jaxwsdir}"/>
                <arg value="-tomcat-embedded"/>
                <arg value="${tomcat.home}"/>
            </arguments>
        </run-tests>
    </target>

    <target name="run-jaxws-local" unless="tomcat">
        <antcall target="run-jaxws-image-local" />
        <antcall target="run-jaxws-wspace-local"/>
    </target>

    <target name="run-jaxws-tomcat" if="tomcat">
        <antcall target="run-jaxws-image-with-tomcat-embedded"/>
        <antcall target="run-jaxws-wspace-with-tomcat-embedded"/>
    </target>


    <target name="run" depends="prepare">
        <antcall target="get-jaxws-image"/>
        <antcall target="run-jaxws-local"/>
        <antcall target="run-jaxws-tomcat"/>
    </target>

    <target name="run-with-as">
        <!-- TODO -->

    </target>

    <property name="skip" value="false"/>

    <propertyset id="proxy.properties">
        <propertyref prefix="java.net.useSystemProxies"/>
        <propertyref prefix="http."/>
        <propertyref prefix="https."/>
        <propertyref prefix="ftp."/>
        <propertyref prefix="socksProxy"/>
    </propertyset>
    <!-- invokes Unit test-->
    <macrodef name="run-tests">
        <element name="arguments"/>
        <sequential>
            <!--
            These are the default args that are passed to the harness which mean that
            the tests will be using the dist image of the wsit workspace , run the tests
            using local transport and recursively scan for all the sub dirs under testcases

            Please modify these options if you wish to test the harness in different
            modes
            For more information on the different command line options
            refer to docs/index.html
            -->
            <java jar="${lib.home}/harness.jar" fork="true">
                <sysproperty key="com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump" value="${log.prop}"/>
                <sysproperty key="com.sun.xml.ws.transport.local.LocalTransportTube.dump" value="${log.prop}"/>
                <syspropertyset refid="proxy.properties"/>


                <arg value="-report"/>
                <arg path="${logs.dir}"/>
                
                <arguments/>

                <!-- test data -->
                <arg value="-r"/>
                <arg path="${test}"/>

                <arg line="${args}"/>
                <jvmarg  line="-Djava.endorsed.dirs=${endorsed.dir} ${libraries.dir.prop} ${jvm.opts.prop}"/>

                <!--jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000" />
                <jvmarg value="-Xdebug"/-->
            </java>

            <mkdir dir="${logs.dir}/html"/>
            <junitreport todir="${logs.dir}/html">
                <fileset dir="${logs.dir}" includes="*.xml"/>
                <report format="frames" todir="${logs.dir}/html"/>
            </junitreport>
        </sequential>
    </macrodef>


    <target name="clean">
        <delete dir="${build.home}"/>
        <delete includeemptydirs="true">
            <fileset dir="${test}" includes="**/work/**"/>
        </delete>
    </target>

</project>
